{"version":3,"sources":["components/PostsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","onPostSelect","className","map","post","id","title","type","onClick","undefined","NewCommentForm","onCommentAdd","useState","name","setName","nameError","setNameError","email","setEmail","emailError","setEmailError","body","setBody","bodyError","setBodyError","onSubmit","e","preventDefault","isValidEmail","test","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","postComments","onCommentDelete","isFormVisible","setIsFormVisible","length","Boolean","comment","href","UserSelector","users","selectedUser","onUserSelect","isOpened","setIsOpened","role","user","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","App","setUsers","setSelectedUser","userPosts","setUserPosts","setSelectedPost","selectedPostComments","setSelectedPostComments","error","setError","setLoadingCursor","document","style","cursor","setDefaultCursor","showError","tmpError","Error","message","getUsers","a","tmpUsers","getPosts","userId","tmpPosts","getPostComments","postId","tmpComments","deleteComment","commentId","addComment","useEffect","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c519a420.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[]\n  selectedPost: Post | undefined\n  onPostSelect: React.Dispatch<React.SetStateAction<Post | undefined>>\n}\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  onPostSelect,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectedPost?.id === post.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => onPostSelect(undefined)}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => onPostSelect(post)}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { FormEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ninterface Props {\n  onCommentAdd: (comment: CommentData) => void\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ onCommentAdd }) => {\n  const [name, setName] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const [body, setBody] = useState('');\n  const [bodyError, setBodyError] = useState(false);\n\n  const handleConfirm = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    // eslint-disable-next-line no-useless-escape, max-len\n    const isValidEmail = (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email));\n\n    if (!name) {\n      setNameError(true);\n    }\n\n    if (!isValidEmail) {\n      setEmailError(true);\n    }\n\n    if (!body) {\n      setBodyError(true);\n    }\n\n    if (nameError || bodyError || !isValidEmail) {\n      return;\n    }\n\n    onCommentAdd({ name, email, body });\n    setBody('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleConfirm}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': nameError,\n            })}\n            value={name}\n            onChange={(e) => {\n              setNameError(false);\n              setName(e.target.value);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': emailError,\n            })}\n            value={email}\n            onChange={(e) => {\n              setEmailError(false);\n              setEmail(e.target.value);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': bodyError,\n            })}\n            value={body}\n            onChange={(e) => {\n              setBodyError(false);\n              setBody(e.target.value);\n            }}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-link\">\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              setName('');\n              setBody('');\n              setEmail('');\n              setBodyError(false);\n              setEmailError(false);\n              setNameError(false);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\ninterface Props {\n  post: Post\n  postComments: Comment[] | undefined\n  onCommentDelete: (id: number) => void\n  onCommentAdd: (comment: CommentData) => void\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  postComments,\n  onCommentDelete,\n  onCommentAdd,\n}) => {\n  const [isFormVisible, setIsFormVisible] = useState(false);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {postComments && !postComments.length && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {postComments && Boolean(postComments.length) && (\n            [(<p className=\"title is-4\">Comments:</p>),\n              ...postComments.map((comment) => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => onCommentDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              )),\n            ])}\n\n          {!isFormVisible && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormVisible(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormVisible && (\n          <NewCommentForm onCommentAdd={onCommentAdd} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[];\n  selectedUser: User | undefined;\n  onUserSelect: (user: User) => (void);\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onUserSelect,\n}) => {\n  const [isOpened, setIsOpened] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isOpened,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpened(!isOpened)}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <a\n              href={`#${user.id}`}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n              onClick={() => {\n                onUserSelect(user);\n                setIsOpened(false);\n              }}\n              key={user.id}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment, CommentData } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>();\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const [userPosts, setUserPosts] = useState<Post[]>();\n  const [selectedPost, setSelectedPost] = useState<Post>();\n  const [selectedPostComments, setSelectedPostComments] = useState<Comment[]>();\n  const [error, setError] = useState<string>();\n\n  const setLoadingCursor = () => {\n    document.body.style.cursor = 'wait';\n  };\n\n  const setDefaultCursor = () => {\n    document.body.style.cursor = 'default';\n  };\n\n  const showError = (e: unknown) => {\n    const tmpError = e instanceof Error\n      ? e.message\n      : 'Something went wrong!';\n\n    setError(tmpError);\n    setTimeout(() => setError(undefined), 2000);\n  };\n\n  const getUsers = async () => {\n    setLoadingCursor();\n\n    try {\n      const tmpUsers = await client.get<User[]>('/users');\n\n      setUsers(tmpUsers);\n    } catch (e) {\n      showError(e);\n    }\n\n    setDefaultCursor();\n  };\n\n  const getPosts = async (userId: number) => {\n    setLoadingCursor();\n\n    try {\n      const tmpPosts = await client.get<Post[]>(`/posts?userId=${userId}`);\n\n      setUserPosts(tmpPosts);\n    } catch (e) {\n      showError(e);\n    }\n\n    setDefaultCursor();\n  };\n\n  const getPostComments = async (postId: number) => {\n    setLoadingCursor();\n\n    try {\n      const tmpComments = await client.get<Comment[]>(`/comments?postId=${postId}`);\n\n      setSelectedPostComments(tmpComments);\n    } catch (e) {\n      showError(e);\n    }\n\n    setDefaultCursor();\n  };\n\n  const deleteComment = async (commentId: number) => {\n    setLoadingCursor();\n\n    if (!selectedPost) {\n      return;\n    }\n\n    try {\n      await client.delete(`/comments/${commentId}`);\n      await getPostComments(selectedPost.id);\n    } catch (e) {\n      showError(e);\n    }\n\n    setDefaultCursor();\n  };\n\n  const addComment = async (data: CommentData) => {\n    setLoadingCursor();\n\n    if (!selectedPost) {\n      return;\n    }\n\n    try {\n      await client.post('/comments', {\n        postId: selectedPost.id,\n        ...data,\n      });\n\n      await getPostComments(selectedPost.id);\n    } catch (e) {\n      showError(e);\n    }\n\n    setDefaultCursor();\n  };\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  useEffect(() => {\n    setUserPosts(undefined);\n    setSelectedPost(undefined);\n\n    if (!selectedUser) {\n      return;\n    }\n\n    getPosts(selectedUser.id);\n  }, [selectedUser]);\n\n  useEffect(() => {\n    setSelectedPostComments(undefined);\n\n    if (!selectedPost) {\n      return;\n    }\n\n    getPostComments(selectedPost.id);\n  }, [selectedPost]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        {error && (\n          <div\n            className=\"notification is-danger\"\n            data-cy=\"PostsLoadingError\"\n          >\n            {error}\n          </div>\n        )}\n\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                {users && (\n                  <UserSelector\n                    users={users}\n                    selectedUser={selectedUser}\n                    onUserSelect={(user) => setSelectedUser(user)}\n                  />\n                )}\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {userPosts && userPosts.length > 0 && (\n                  <PostsList\n                    posts={userPosts}\n                    selectedPost={selectedPost}\n                    onPostSelect={setSelectedPost}\n                  />\n                )}\n\n                {userPosts && !userPosts.length && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                  postComments={selectedPostComments}\n                  onCommentDelete={deleteComment}\n                  onCommentAdd={addComment}\n                />\n              </div>\n            </div>\n          )}\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}